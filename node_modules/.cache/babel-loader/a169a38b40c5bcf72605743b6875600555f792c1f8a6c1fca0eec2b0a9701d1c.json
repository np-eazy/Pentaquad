{"ast":null,"code":"import Direction from \"./Direction\";\nimport { randint, getPID } from \"./Utils\";\n\n// A single piece \nclass Piece {\n  constructor(_ref) {\n    var _this = this;\n    let {\n      center_x,\n      center_y,\n      angle,\n      pieceSize,\n      pidSize\n    } = _ref;\n    return function (angle) {\n      [_this.cx, _this.cy, _this.angle] = [center_x, center_y];\n      _this.angle = angle;\n      _this.dxn = new Direction(angle);\n      _this.collisionFlag = false;\n      _this.pidSize = pidSize;\n\n      // Create a set of actual cells, to be offset by cx and cy\n      _this.cells = new Map();\n      var [x, y, dxn] = [0, 0, new Direction(randint(0, 4))];\n      var pid = getPID(x, y, _this.pidSize);\n      for (var i = 0; i < pieceSize; i++) {\n        var valid = false;\n        while (!valid) {\n          _this.cells.set(pid, [x, y]);\n          var turnAngle = randint(-1, 2);\n          dxn.turn(turnAngle);\n          x += dxn.dx;\n          y += dxn.dy;\n          pid = getPID(x, y, _this.pidSize);\n          if (_this.cells.get(pid) == undefined) {\n            valid = true;\n          } else {\n            valid = false;\n            x -= dxn.dx;\n            y -= dxn.dy;\n            dxn.turn(-turnAngle);\n          }\n        }\n      }\n\n      // Create 4 different sets to check hitboxes in different gravity\n      _this.collisionSets = [];\n      dxn = new Direction(0);\n      var [x, y] = [0, 0];\n      for (var angle = 0; angle < 4; angle++) {\n        var collisionSet = new Map();\n        _this.cells.forEach(val => {\n          var x_ = val[0] + dxn.dx;\n          var y_ = val[1] + dxn.dy;\n          pid = getPID(x_, y_, _this.pidSize);\n          collisionSet.set(pid, [x_, y_]);\n        });\n        _this.collisionSets.push(collisionSet);\n        dxn.turnLeft(1);\n      }\n\n      // Placeholder for setting different types/properties of this piece.\n      _this.type = 1;\n    }(angle);\n  }\n\n  // Return whether or not the block has a collision with this angle.\n  checkCollision(angle, board, boundarySets) {\n    var [xSize, ySize] = [board.length, board[0].length];\n    var collisionSet = this.collisionSets[angle];\n    var boundarySet = boundarySets[angle];\n    var collision = false;\n    // Check for a boundary collision\n    collisionSet.forEach(val => {\n      // BoundarySet has global PIDs\n      // CollisionSet Local PID: add cx and cy to collisionSet to globalize\n      var globalPid = getPID(val[0] + this.cx, val[1] + this.cy, this.pidSize);\n      if (!collision && boundarySet.has(globalPid)) {\n        collision = true;\n      }\n    });\n    if (collision == true) {\n      return true;\n    }\n\n    // Check for a board collision\n    for (var y = 0; y < ySize; y++) {\n      for (var x = 0; x < xSize; x++) {\n        if (board[y][x] > 0) {\n          // x, y generate global PIDs\n          // Subtract cx and cy from PIDs to localize\n          var globalPid = getPID(x - this.cx, y - this.cy, this.pidSize);\n          if (!collision && collisionSet.has(globalPid)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  // Move this piece based on a given x and y direction and recheck its appropriate hitbox\n  activeMove(angle) {\n    var adxn = new Direction(angle);\n    this.cx += adxn.dx;\n    this.cy += adxn.dy;\n    console.log(\"yo\");\n  }\n\n  // Move this piece based on its gravity and recheck its appropriate hitbox.\n  idleMove() {\n    this.cx += this.dxn.dx;\n    this.cy += this.dxn.dy;\n  }\n}\nexport default Piece;","map":{"version":3,"names":["Direction","randint","getPID","Piece","constructor","_ref","_this","center_x","center_y","angle","pieceSize","pidSize","cx","cy","dxn","collisionFlag","cells","Map","x","y","pid","i","valid","set","turnAngle","turn","dx","dy","get","undefined","collisionSets","collisionSet","forEach","val","x_","y_","push","turnLeft","type","checkCollision","board","boundarySets","xSize","ySize","length","boundarySet","collision","globalPid","has","activeMove","adxn","console","log","idleMove"],"sources":["/Users/joeyzhu/code/visuals/pentaquad/src/components/game/gameUtils/Piece.js"],"sourcesContent":["import Direction from \"./Direction\";\nimport { randint, getPID } from \"./Utils\";\n\n// A single piece \nclass Piece {\n    constructor({\n        center_x, \n        center_y, \n        angle, \n        pieceSize, \n        pidSize\n    }) {\n        [this.cx, this.cy, this.angle] = [center_x, center_y];\n        this.angle = angle;\n        this.dxn = new Direction(angle);\n        this.collisionFlag = false;\n        this.pidSize = pidSize;\n\n        // Create a set of actual cells, to be offset by cx and cy\n        this.cells = new Map();\n        var [x, y, dxn] = [0, 0, new Direction(randint(0, 4))];\n        var pid = getPID(x, y, this.pidSize);\n        for (var i = 0; i < pieceSize; i++) {\n            var valid = false;\n            while (!valid) {\n                this.cells.set(pid, [x, y])\n                var turnAngle = randint(-1, 2)\n                dxn.turn(turnAngle)\n                x += dxn.dx\n                y += dxn.dy\n                pid = getPID(x, y, this.pidSize)\n                \n                if (this.cells.get(pid) == undefined) {\n                    valid = true\n                } else {\n                    valid = false\n                    x -= dxn.dx\n                    y -= dxn.dy\n                    dxn.turn(-turnAngle)\n                }\n            }\n        }\n\n        // Create 4 different sets to check hitboxes in different gravity\n        this.collisionSets = [];\n        dxn = new Direction(0);\n        var [x, y] = [0, 0]\n        for (var angle = 0; angle < 4; angle++) {\n            var collisionSet = new Map();\n            this.cells.forEach((val) => {\n                var x_ = val[0] + dxn.dx\n                var y_ = val[1] + dxn.dy\n                pid = getPID(x_, y_, this.pidSize);\n                collisionSet.set(pid, [x_, y_]);\n            })\n            this.collisionSets.push(collisionSet)\n            dxn.turnLeft(1);\n        }\n\n        // Placeholder for setting different types/properties of this piece.\n        this.type = 1\n    }\n\n    // Return whether or not the block has a collision with this angle.\n    checkCollision(angle, board, boundarySets) {\n\n        var [xSize, ySize] = [board.length, board[0].length];\n        var collisionSet = this.collisionSets[angle];\n        var boundarySet = boundarySets[angle];\n        var collision = false;\n        // Check for a boundary collision\n        collisionSet.forEach((val) => {\n            // BoundarySet has global PIDs\n            // CollisionSet Local PID: add cx and cy to collisionSet to globalize\n            var globalPid = getPID(val[0] + this.cx, val[1] + this.cy, this.pidSize)\n            if (!collision && boundarySet.has(globalPid)) {\n                collision = true;\n            }\n        })\n        if (collision == true) {\n            return true;\n        }\n\n        // Check for a board collision\n        for (var y = 0; y < ySize; y++) {\n            for (var x = 0; x < xSize; x++) {\n                if (board[y][x] > 0) {\n                    // x, y generate global PIDs\n                    // Subtract cx and cy from PIDs to localize\n                    var globalPid = getPID(x - this.cx, y - this.cy, this.pidSize)\n                    if (!collision && collisionSet.has(globalPid)) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    // Move this piece based on a given x and y direction and recheck its appropriate hitbox\n    activeMove(angle) {\n        var adxn = new Direction(angle);\n        this.cx += adxn.dx;\n        this.cy += adxn.dy;\n        console.log(\"yo\")\n    }\n\n    // Move this piece based on its gravity and recheck its appropriate hitbox.\n    idleMove() {\n        this.cx += this.dxn.dx;\n        this.cy += this.dxn.dy;\n    }\n}\n\nexport default Piece;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}