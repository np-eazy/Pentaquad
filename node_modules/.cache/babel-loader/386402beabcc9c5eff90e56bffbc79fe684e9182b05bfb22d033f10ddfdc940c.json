{"ast":null,"code":"// Generate a random integer from a up to but not including b\nexport function randint(a, b) {\n  return Math.floor(Math.random() * (b - a)) + a;\n}\n\n// Generate a unique int of coordinate x, y given a maximum groupSize, in order\n// to facilitate creating sets of coordinates for quick piece formation and collision detection.\nexport function getPID(x, y, groupSize) {\n  return x * groupSize + y;\n}\n\n// Direction angle conventions for coreState's grid\nexport const DXN = {\n  RIGHT: 0,\n  UP: 1,\n  LEFT: 2,\n  DOWN: 3\n};\n\n// Return the corresponding dx and dy with a certain angle.\nexport function getDiff(angle) {\n  if (angle % 4 == DXN.RIGHT) {\n    return [1, 0];\n  } else if (angle % 4 == DXN.UP) {\n    return [0, -1];\n  } else if (angle % 4 == DXN.LEFT) {\n    return [-1, 0];\n  } else if (angle % 4 == DXN.DOWN) {\n    return [0, 1];\n  }\n}\n\n// A class to manage directionality and rotation in this game. Directions have\n// angles which represent int values for each of 4 grid directions, and associated\n// dx and dy values.\nexport class Direction {\n  constructor(angle) {\n    this.angle = angle;\n    this.updateDiff();\n  }\n\n  // Update the dx and dy after any angle is changed.\n  updateDiff() {\n    var diff = getDiff(this.angle);\n    this.dx = diff[0];\n    this.dy = diff[1];\n  }\n\n  // Turn left n times\n  turnLeft(n) {\n    this.angle = (this.angle + n) % 4;\n    this.updateDiff();\n  }\n\n  // Turn right n times\n  turnRight(n) {\n    this.angle = (this.angle + 3 * n) % 4;\n    this.updateDiff();\n  }\n\n  // Positive n leads to left turn, and negative with right.\n  // This is meant to emulate 2D space angle conventions \n  turn(n) {\n    if (n > 0) {\n      this.turnLeft(n);\n    } else {\n      this.turnRight(-n);\n    }\n  }\n}","map":{"version":3,"names":["randint","a","b","Math","floor","random","getPID","x","y","groupSize","DXN","RIGHT","UP","LEFT","DOWN","getDiff","angle","Direction","constructor","updateDiff","diff","dx","dy","turnLeft","n","turnRight","turn"],"sources":["/Users/joeyzhu/code/visuals/pentaquad/src/components/game/coreState/Utils.js"],"sourcesContent":["// Generate a random integer from a up to but not including b\nexport function randint(a, b) {\n    return Math.floor(Math.random() * (b - a)) + a;\n}\n\n// Generate a unique int of coordinate x, y given a maximum groupSize, in order\n// to facilitate creating sets of coordinates for quick piece formation and collision detection.\nexport function getPID(x, y, groupSize) {\n    return x * groupSize + y;\n}\n\n// Direction angle conventions for coreState's grid\nexport const DXN = {\n    RIGHT: 0,\n    UP: 1,\n    LEFT: 2,\n    DOWN: 3,\n}\n\n// Return the corresponding dx and dy with a certain angle.\nexport function getDiff(angle) {\n    if (angle % 4 == DXN.RIGHT) {\n        return [1, 0]\n    } else if (angle % 4 == DXN.UP) {\n        return [0, -1]\n    } else if (angle % 4 == DXN.LEFT) {\n        return [-1, 0]\n    } else if (angle % 4 == DXN.DOWN) {\n        return [0, 1]\n    }\n}\n\n// A class to manage directionality and rotation in this game. Directions have\n// angles which represent int values for each of 4 grid directions, and associated\n// dx and dy values.\nexport class Direction {\n    constructor(angle) {\n        this.angle = angle\n        this.updateDiff()\n    }\n\n    // Update the dx and dy after any angle is changed.\n    updateDiff() {\n        var diff = getDiff(this.angle)\n        this.dx = diff[0]\n        this.dy = diff[1]\n    }\n\n    // Turn left n times\n    turnLeft(n) {\n        this.angle = (this.angle + n) % 4\n        this.updateDiff();\n    }\n\n    // Turn right n times\n    turnRight(n) {\n        this.angle = (this.angle + 3 * n) % 4\n        this.updateDiff()\n    }\n\n    // Positive n leads to left turn, and negative with right.\n    // This is meant to emulate 2D space angle conventions \n    turn(n) {\n        if (n > 0) {\n            this.turnLeft(n)\n        } else {\n            this.turnRight(-n)\n        }\n    }\n}\n\n"],"mappings":"AAAA;AACA,OAAO,SAASA,OAAOA,CAACC,CAAC,EAAEC,CAAC,EAAE;EAC1B,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,IAAIH,CAAC,GAAGD,CAAC,CAAC,CAAC,GAAGA,CAAC;AAClD;;AAEA;AACA;AACA,OAAO,SAASK,MAAMA,CAACC,CAAC,EAAEC,CAAC,EAAEC,SAAS,EAAE;EACpC,OAAOF,CAAC,GAAGE,SAAS,GAAGD,CAAC;AAC5B;;AAEA;AACA,OAAO,MAAME,GAAG,GAAG;EACfC,KAAK,EAAE,CAAC;EACRC,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,CAAC;EACPC,IAAI,EAAE;AACV,CAAC;;AAED;AACA,OAAO,SAASC,OAAOA,CAACC,KAAK,EAAE;EAC3B,IAAIA,KAAK,GAAG,CAAC,IAAIN,GAAG,CAACC,KAAK,EAAE;IACxB,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;EACjB,CAAC,MAAM,IAAIK,KAAK,GAAG,CAAC,IAAIN,GAAG,CAACE,EAAE,EAAE;IAC5B,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAClB,CAAC,MAAM,IAAII,KAAK,GAAG,CAAC,IAAIN,GAAG,CAACG,IAAI,EAAE;IAC9B,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EAClB,CAAC,MAAM,IAAIG,KAAK,GAAG,CAAC,IAAIN,GAAG,CAACI,IAAI,EAAE;IAC9B,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;EACjB;AACJ;;AAEA;AACA;AACA;AACA,OAAO,MAAMG,SAAS,CAAC;EACnBC,WAAWA,CAACF,KAAK,EAAE;IACf,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACG,UAAU,EAAE;EACrB;;EAEA;EACAA,UAAUA,CAAA,EAAG;IACT,IAAIC,IAAI,GAAGL,OAAO,CAAC,IAAI,CAACC,KAAK,CAAC;IAC9B,IAAI,CAACK,EAAE,GAAGD,IAAI,CAAC,CAAC,CAAC;IACjB,IAAI,CAACE,EAAE,GAAGF,IAAI,CAAC,CAAC,CAAC;EACrB;;EAEA;EACAG,QAAQA,CAACC,CAAC,EAAE;IACR,IAAI,CAACR,KAAK,GAAG,CAAC,IAAI,CAACA,KAAK,GAAGQ,CAAC,IAAI,CAAC;IACjC,IAAI,CAACL,UAAU,EAAE;EACrB;;EAEA;EACAM,SAASA,CAACD,CAAC,EAAE;IACT,IAAI,CAACR,KAAK,GAAG,CAAC,IAAI,CAACA,KAAK,GAAG,CAAC,GAAGQ,CAAC,IAAI,CAAC;IACrC,IAAI,CAACL,UAAU,EAAE;EACrB;;EAEA;EACA;EACAO,IAAIA,CAACF,CAAC,EAAE;IACJ,IAAIA,CAAC,GAAG,CAAC,EAAE;MACP,IAAI,CAACD,QAAQ,CAACC,CAAC,CAAC;IACpB,CAAC,MAAM;MACH,IAAI,CAACC,SAAS,CAAC,CAACD,CAAC,CAAC;IACtB;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}