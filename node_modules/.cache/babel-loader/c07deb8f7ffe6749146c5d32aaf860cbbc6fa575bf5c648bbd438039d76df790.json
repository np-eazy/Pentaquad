{"ast":null,"code":"import Direction from \"./gameUtils/Direction\";\nimport Piece from \"./gameUtils/Piece\";\n\n// TODO: Pull up this function into a utils/functions file\nfunction randint(a, b) {\n  return Math.floor(Math.random() * (b - a)) + a;\n}\nconst Gravity = {\n  RIGHT: 0,\n  UP: 1,\n  LEFT: 2,\n  DOWN: 3\n};\nconst PIECE_SIZE = 5;\nconst SPAWN_OFFSET = 2;\nconst GameState = class {\n  constructor(_ref) {\n    let {\n      boardSize\n    } = _ref;\n    this.timer = 0;\n    this.boardSize = boardSize;\n    this.pidSize = (this.boardSize + SPAWN_OFFSET * 2) * 2;\n    this.gravity = Gravity.DOWN;\n    this.placeBlock = true;\n    this.currPiece = null;\n  }\n  update(increment) {\n    if (this.placeBlock) {\n      var [x, y] = [0, 0];\n      var r = randint(-SPAWN_OFFSET, this.boardSize + SPAWN_OFFSET);\n      this.gravity.turnLeft(1);\n      if (this.gravity == Gravity.RIGHT) {\n        [x, y] = [-SPAWN_OFFSET, r];\n      } else if (this.gravity == Gravity.UP) {\n        [x, y] = [r, -SPAWN_OFFSET];\n      } else if (this.gravity == Gravity.LEFT) {\n        [x, y] = [SPAWN_OFFSET + this.board_size, r];\n      } else if (this.gravity == Gravity.DOWN) {\n        [x, y] = [r, SPAWN_OFFSET + this.board_size];\n      }\n      this.currPiece = new Piece({\n        center_x: x,\n        center_y: y,\n        angle: this.gravity,\n        pieceSize: PIECE_SIZE,\n        boardXSize: this.boardSize,\n        boardYSize: this.boardSize,\n        pidSize: this.pidSize\n      });\n      this.placeBlock = false;\n    }\n  }\n  executeAction(action) {\n    console.log(action);\n    return this;\n  }\n};\nexport default GameState;","map":{"version":3,"names":["Direction","Piece","randint","a","b","Math","floor","random","Gravity","RIGHT","UP","LEFT","DOWN","PIECE_SIZE","SPAWN_OFFSET","GameState","constructor","_ref","boardSize","timer","pidSize","gravity","placeBlock","currPiece","update","increment","x","y","r","turnLeft","board_size","center_x","center_y","angle","pieceSize","boardXSize","boardYSize","executeAction","action","console","log"],"sources":["/Users/joeyzhu/code/visuals/pentaquad/src/components/game/GameState.js"],"sourcesContent":["import Direction from \"./gameUtils/Direction\";\nimport Piece from \"./gameUtils/Piece\";\n\n// TODO: Pull up this function into a utils/functions file\nfunction randint(a, b) {\n    return Math.floor(Math.random() * (b - a)) + a;\n}\n\nconst Gravity = {\n    RIGHT: 0,\n    UP: 1,\n    LEFT: 2,\n    DOWN: 3,\n}\n\nconst PIECE_SIZE = 5;\nconst SPAWN_OFFSET = 2;\n\nconst GameState = class {\n    constructor ({boardSize}) {\n        this.timer = 0;\n        this.boardSize = boardSize;\n        this.pidSize = (this.boardSize + SPAWN_OFFSET * 2) * 2;\n        this.gravity = Gravity.DOWN;\n        this.placeBlock = true;\n        this.currPiece= null;\n    }\n\n    update(increment) {\n        if (this.placeBlock) {\n            var [x, y] = [0, 0]\n            var r = randint(-SPAWN_OFFSET, this.boardSize + SPAWN_OFFSET)\n            \n            this.gravity.turnLeft(1);\n            if (this.gravity == Gravity.RIGHT) {\n                [x, y] = [-SPAWN_OFFSET, r]\n            } else if (this.gravity == Gravity.UP) {\n                [x, y] = [r, -SPAWN_OFFSET]\n            } else if (this.gravity == Gravity.LEFT) {\n                [x, y] = [SPAWN_OFFSET + this.board_size, r]\n            } else if (this.gravity == Gravity.DOWN) {\n                [x, y] = [r, SPAWN_OFFSET + this.board_size]\n            }\n            this.currPiece = new Piece({\n                center_x: x,\n                center_y: y,\n                angle: this.gravity,\n                pieceSize: PIECE_SIZE,\n                boardXSize: this.boardSize,\n                boardYSize: this.boardSize,\n                pidSize: this.pidSize,\n            })\n            this.placeBlock = false;\n        } \n    }\n\n    executeAction(action) {\n        console.log(action);\n        return this;\n    }\n}\n\nexport default GameState;"],"mappings":"AAAA,OAAOA,SAAS,MAAM,uBAAuB;AAC7C,OAAOC,KAAK,MAAM,mBAAmB;;AAErC;AACA,SAASC,OAAOA,CAACC,CAAC,EAAEC,CAAC,EAAE;EACnB,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,IAAIH,CAAC,GAAGD,CAAC,CAAC,CAAC,GAAGA,CAAC;AAClD;AAEA,MAAMK,OAAO,GAAG;EACZC,KAAK,EAAE,CAAC;EACRC,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,CAAC;EACPC,IAAI,EAAE;AACV,CAAC;AAED,MAAMC,UAAU,GAAG,CAAC;AACpB,MAAMC,YAAY,GAAG,CAAC;AAEtB,MAAMC,SAAS,GAAG,MAAM;EACpBC,WAAWA,CAAAC,IAAA,EAAe;IAAA,IAAb;MAACC;IAAS,CAAC,GAAAD,IAAA;IACpB,IAAI,CAACE,KAAK,GAAG,CAAC;IACd,IAAI,CAACD,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACE,OAAO,GAAG,CAAC,IAAI,CAACF,SAAS,GAAGJ,YAAY,GAAG,CAAC,IAAI,CAAC;IACtD,IAAI,CAACO,OAAO,GAAGb,OAAO,CAACI,IAAI;IAC3B,IAAI,CAACU,UAAU,GAAG,IAAI;IACtB,IAAI,CAACC,SAAS,GAAE,IAAI;EACxB;EAEAC,MAAMA,CAACC,SAAS,EAAE;IACd,IAAI,IAAI,CAACH,UAAU,EAAE;MACjB,IAAI,CAACI,CAAC,EAAEC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;MACnB,IAAIC,CAAC,GAAG1B,OAAO,CAAC,CAACY,YAAY,EAAE,IAAI,CAACI,SAAS,GAAGJ,YAAY,CAAC;MAE7D,IAAI,CAACO,OAAO,CAACQ,QAAQ,CAAC,CAAC,CAAC;MACxB,IAAI,IAAI,CAACR,OAAO,IAAIb,OAAO,CAACC,KAAK,EAAE;QAC/B,CAACiB,CAAC,EAAEC,CAAC,CAAC,GAAG,CAAC,CAACb,YAAY,EAAEc,CAAC,CAAC;MAC/B,CAAC,MAAM,IAAI,IAAI,CAACP,OAAO,IAAIb,OAAO,CAACE,EAAE,EAAE;QACnC,CAACgB,CAAC,EAAEC,CAAC,CAAC,GAAG,CAACC,CAAC,EAAE,CAACd,YAAY,CAAC;MAC/B,CAAC,MAAM,IAAI,IAAI,CAACO,OAAO,IAAIb,OAAO,CAACG,IAAI,EAAE;QACrC,CAACe,CAAC,EAAEC,CAAC,CAAC,GAAG,CAACb,YAAY,GAAG,IAAI,CAACgB,UAAU,EAAEF,CAAC,CAAC;MAChD,CAAC,MAAM,IAAI,IAAI,CAACP,OAAO,IAAIb,OAAO,CAACI,IAAI,EAAE;QACrC,CAACc,CAAC,EAAEC,CAAC,CAAC,GAAG,CAACC,CAAC,EAAEd,YAAY,GAAG,IAAI,CAACgB,UAAU,CAAC;MAChD;MACA,IAAI,CAACP,SAAS,GAAG,IAAItB,KAAK,CAAC;QACvB8B,QAAQ,EAAEL,CAAC;QACXM,QAAQ,EAAEL,CAAC;QACXM,KAAK,EAAE,IAAI,CAACZ,OAAO;QACnBa,SAAS,EAAErB,UAAU;QACrBsB,UAAU,EAAE,IAAI,CAACjB,SAAS;QAC1BkB,UAAU,EAAE,IAAI,CAAClB,SAAS;QAC1BE,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC,CAAC;MACF,IAAI,CAACE,UAAU,GAAG,KAAK;IAC3B;EACJ;EAEAe,aAAaA,CAACC,MAAM,EAAE;IAClBC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;IACnB,OAAO,IAAI;EACf;AACJ,CAAC;AAED,eAAevB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}