{"ast":null,"code":"export class Grid {\n  constructor(xSize, ySize) {\n    this.array = new Array(ySize);\n    this.xSize = xSize;\n    this.ySize = ySize;\n    for (var y = 0; y < ySize; y++) {\n      this.array[y] = new Array(xSize);\n      for (var x = 0; x < xSize; x++) {\n        this.array[y][x] = 0;\n      }\n    }\n  }\n  getVal(x, y) {\n    return this.array[y][x];\n  }\n  setVal(x, y, val) {\n    this.array[y][x] = val;\n  }\n\n  // Desctructive addition of new grid\n  add(other) {\n    for (var y = 0; y < this.ySize; y++) {\n      for (var x = 0; x < this.xSize; x++) {\n        this.array[y][x] += other.array[y][x];\n      }\n    }\n  }\n\n  // Desctructive subtraction of new grid\n  subtract(other) {\n    for (var y = 0; y < this.ySize; y++) {\n      for (var x = 0; x < this.xSize; x++) {\n        this.array[y][x] -= other.array[y][x];\n      }\n    }\n  }\n\n  // Destructive scaling of all grid values\n  scale(factor) {\n    for (var y = 0; y < this.ySize; y++) {\n      for (var x = 0; x < this.xSize; x++) {\n        this.array[y][x] *= factor;\n      }\n    }\n  }\n\n  // Destructively blend with another grid\n  interpolate(other, fraction) {\n    for (var y = 0; y < this.ySize; y++) {\n      for (var x = 0; x < this.xSize; x++) {\n        this.array[y][x] = this.array[y][x] + fraction * (other.array[y][x] - this.array[y][x]);\n      }\n    }\n  }\n\n  // Deepcopy this grid's values to another grid\n  copyTo(other) {\n    for (var y = 0; y < this.ySize; y++) {\n      for (var x = 0; x < this.xSize; x++) {\n        other.setVal(x, y, this.getVal(x, y));\n      }\n    }\n  }\n\n  // Constructive addition of new grid\n  createSum(other) {\n    var newGrid = new Grid(this.xSize, this.ySize);\n    for (var y = 0; y < this.ySize; y++) {\n      for (var x = 0; x < this.xSize; x++) {\n        newGrid.array[y][x] = this.array[y][x] + other.array[y][x];\n      }\n    }\n    return newGrid;\n  }\n\n  // Constructive subtraction of new grid\n  createDelta(other) {\n    var newGrid = new Grid(this.xSize, this.ySize);\n    for (var y = 0; y < this.ySize; y++) {\n      for (var x = 0; x < this.xSize; x++) {\n        newGrid.array[y][x] = this.array[y][x] + other.array[y][x];\n      }\n    }\n    return newGrid;\n  }\n\n  // Destructive scaling of all grid values\n  createScale(factor) {\n    var newGrid = new Grid(this.xSize, this.ySize);\n    for (var y = 0; y < this.ySize; y++) {\n      for (var x = 0; x < this.xSize; x++) {\n        newGrid.array[y][x] = this.array[y][x] * factor;\n      }\n    }\n    return newGrid;\n  }\n  createInterpolation(other, fraction) {\n    var newGrid = new Grid(this.xSize, this.ySize);\n    for (var y = 0; y < this.ySize; y++) {\n      for (var x = 0; x < this.xSize; x++) {\n        newGrid.array[y][x] = this.array[y][x] + fraction * (other.array[y][x] - this.array[y][x]);\n      }\n    }\n    return newGrid;\n  }\n}","map":{"version":3,"names":["Grid","constructor","xSize","ySize","array","Array","y","x","getVal","setVal","val","add","other","subtract","scale","factor","interpolate","fraction","copyTo","createSum","newGrid","createDelta","createScale","createInterpolation"],"sources":["/Users/joeyzhu/code/visuals/pentaquad/src/utils/grid.js"],"sourcesContent":["export class Grid {\n    constructor(xSize, ySize) {\n        this.array = new Array(ySize);\n        this.xSize = xSize;\n        this.ySize = ySize;\n        for (var y = 0; y < ySize; y++) {\n            this.array[y] = new Array(xSize);\n            for (var x = 0; x < xSize; x++) {\n                this.array[y][x] = 0;\n            }\n        }\n    }\n    getVal(x, y) { return this.array[y][x]; }\n    setVal(x, y, val) { this.array[y][x] = val; }\n\n    // Desctructive addition of new grid\n    add(other) { \n        for (var y = 0; y < this.ySize; y++) {\n            for (var x = 0; x < this.xSize; x++) {\n                this.array[y][x] += other.array[y][x];\n            }        \n        }\n    }\n\n    // Desctructive subtraction of new grid\n    subtract(other) { \n        for (var y = 0; y < this.ySize; y++) {\n            for (var x = 0; x < this.xSize; x++) {\n                this.array[y][x] -= other.array[y][x];\n            }        \n        }\n    }\n\n    // Destructive scaling of all grid values\n    scale(factor) {\n        for (var y = 0; y < this.ySize; y++) {\n            for (var x = 0; x < this.xSize; x++) {\n                this.array[y][x] *= factor;\n            }        \n        }\n    }\n\n    // Destructively blend with another grid\n    interpolate(other, fraction) { \n        for (var y = 0; y < this.ySize; y++) {\n            for (var x = 0; x < this.xSize; x++) {\n                this.array[y][x] = this.array[y][x] + fraction * (other.array[y][x] - this.array[y][x]);\n            }        \n        }\n    }\n\n    // Deepcopy this grid's values to another grid\n    copyTo(other) {\n        for (var y = 0; y < this.ySize; y++) {\n            for (var x = 0; x < this.xSize; x++) {\n                other.setVal(x, y, \n                    this.getVal(x, y));\n            }        \n        }\n    }\n\n    // Constructive addition of new grid\n    createSum(other) {\n        var newGrid = new Grid(this.xSize, this.ySize);\n        for (var y = 0; y < this.ySize; y++) {\n            for (var x = 0; x < this.xSize; x++) {\n                newGrid.array[y][x] = this.array[y][x] + other.array[y][x];\n            }        \n        }\n        return newGrid;\n    }\n\n    // Constructive subtraction of new grid\n    createDelta(other) { \n        var newGrid = new Grid(this.xSize, this.ySize);\n        for (var y = 0; y < this.ySize; y++) {\n            for (var x = 0; x < this.xSize; x++) {\n                newGrid.array[y][x] = this.array[y][x] + other.array[y][x];\n            }        \n        }\n        return newGrid;\n    }\n\n    // Destructive scaling of all grid values\n    createScale(factor) {\n        var newGrid = new Grid(this.xSize, this.ySize);\n        for (var y = 0; y < this.ySize; y++) {\n            for (var x = 0; x < this.xSize; x++) {\n                newGrid.array[y][x] = this.array[y][x] * factor;\n            }        \n        }\n        return newGrid;\n    }\n\n    createInterpolation(other, fraction) { \n        var newGrid = new Grid(this.xSize, this.ySize);\n        for (var y = 0; y < this.ySize; y++) {\n            for (var x = 0; x < this.xSize; x++) {\n                newGrid.array[y][x] = this.array[y][x] + fraction * (other.array[y][x] - this.array[y][x]);\n            }        \n        }\n        return newGrid;\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}