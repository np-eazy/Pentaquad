{"ast":null,"code":"// A class to manage directionality and rotation in this game. Directions have\n// angles which represent int values for each of 4 grid directions, and associated\n// dx and dy values.\nclass Direction {\n  constructor(angle) {\n    this.angle = angle;\n    this.updateDiff();\n  }\n  updateDiff() {\n    var diff = getDiff(this.angle);\n    this.dx = diff[0];\n    this.dy = diff[1];\n  }\n\n  // Turn left n times\n  turnLeft(n) {\n    this.angle = (this.angle + n) % 4;\n    this.updateDiff();\n  }\n\n  // Turn right n times\n  turnRight(n) {\n    this.angle = (this.angle + 3 * n) % 4;\n    this.updateDiff();\n  }\n\n  // Positive n leads to left turn, and negative with right.\n  // This is meant to emulate 2D space angle conventions \n  turn(n) {\n    if (n > 0) {\n      this.turnLeft(n);\n    } else {\n      this.turnRight(-n);\n    }\n  }\n}\n\n// Return the corresponding dx and dy with a certain angle.\nfunction getDiff(angle) {\n  if (angle % 4 == 0) {\n    return [1, 0];\n  } else if (angle % 4 == 1) {\n    return [0, -1];\n  } else if (angle % 4 == 2) {\n    return [-1, 0];\n  } else if (angle % 4 == 3) {\n    return [0, 1];\n  }\n}\nexport default Direction;","map":{"version":3,"names":["Direction","constructor","angle","updateDiff","diff","getDiff","dx","dy","turnLeft","n","turnRight","turn"],"sources":["/Users/joeyzhu/code/visuals/pentaquad/src/components/game/gameUtils/Direction.js"],"sourcesContent":["// A class to manage directionality and rotation in this game. Directions have\n// angles which represent int values for each of 4 grid directions, and associated\n// dx and dy values.\nclass Direction {\n    constructor(angle) {\n        this.angle = angle;\n        this.updateDiff();\n    }\n\n    updateDiff() {\n        var diff = getDiff(this.angle);\n        this.dx = diff[0]\n        this.dy = diff[1]\n    }\n\n    // Turn left n times\n    turnLeft(n) {\n        this.angle = (this.angle + n) % 4;\n        this.updateDiff();\n    }\n\n    // Turn right n times\n    turnRight(n) {\n        this.angle = (this.angle + 3 * n) % 4;\n        this.updateDiff();\n    }\n\n    // Positive n leads to left turn, and negative with right.\n    // This is meant to emulate 2D space angle conventions \n    turn(n) {\n        if (n > 0) {\n            this.turnLeft(n)\n        } else {\n            this.turnRight(-n)\n        }\n    }\n}\n\n// Return the corresponding dx and dy with a certain angle.\nfunction getDiff(angle) {\n    if (angle % 4 == 0) {\n        return [1, 0]\n    } else if (angle % 4 == 1) {\n        return [0, -1]\n    } else if (angle % 4 == 2) {\n        return [-1, 0]\n    } else if (angle % 4 == 3) {\n        return [0, 1]\n    }\n}\n\nexport default Direction;"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,SAAS,CAAC;EACZC,WAAWA,CAACC,KAAK,EAAE;IACf,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,UAAU,EAAE;EACrB;EAEAA,UAAUA,CAAA,EAAG;IACT,IAAIC,IAAI,GAAGC,OAAO,CAAC,IAAI,CAACH,KAAK,CAAC;IAC9B,IAAI,CAACI,EAAE,GAAGF,IAAI,CAAC,CAAC,CAAC;IACjB,IAAI,CAACG,EAAE,GAAGH,IAAI,CAAC,CAAC,CAAC;EACrB;;EAEA;EACAI,QAAQA,CAACC,CAAC,EAAE;IACR,IAAI,CAACP,KAAK,GAAG,CAAC,IAAI,CAACA,KAAK,GAAGO,CAAC,IAAI,CAAC;IACjC,IAAI,CAACN,UAAU,EAAE;EACrB;;EAEA;EACAO,SAASA,CAACD,CAAC,EAAE;IACT,IAAI,CAACP,KAAK,GAAG,CAAC,IAAI,CAACA,KAAK,GAAG,CAAC,GAAGO,CAAC,IAAI,CAAC;IACrC,IAAI,CAACN,UAAU,EAAE;EACrB;;EAEA;EACA;EACAQ,IAAIA,CAACF,CAAC,EAAE;IACJ,IAAIA,CAAC,GAAG,CAAC,EAAE;MACP,IAAI,CAACD,QAAQ,CAACC,CAAC,CAAC;IACpB,CAAC,MAAM;MACH,IAAI,CAACC,SAAS,CAAC,CAACD,CAAC,CAAC;IACtB;EACJ;AACJ;;AAEA;AACA,SAASJ,OAAOA,CAACH,KAAK,EAAE;EACpB,IAAIA,KAAK,GAAG,CAAC,IAAI,CAAC,EAAE;IAChB,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;EACjB,CAAC,MAAM,IAAIA,KAAK,GAAG,CAAC,IAAI,CAAC,EAAE;IACvB,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAClB,CAAC,MAAM,IAAIA,KAAK,GAAG,CAAC,IAAI,CAAC,EAAE;IACvB,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EAClB,CAAC,MAAM,IAAIA,KAAK,GAAG,CAAC,IAAI,CAAC,EAAE;IACvB,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;EACjB;AACJ;AAEA,eAAeF,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}