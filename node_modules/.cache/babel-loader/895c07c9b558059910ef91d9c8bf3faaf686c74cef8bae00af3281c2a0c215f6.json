{"ast":null,"code":"import Direction from \"./gameUtils/Direction\";\nimport Piece from \"./gameUtils/Piece\";\n\n// TODO: Pull up this function into a utils/functions file\nfunction randint(a, b) {\n  return Math.floor(Math.random() * (b - a)) + a;\n}\nconst Gravity = {\n  RIGHT: 0,\n  UP: 1,\n  LEFT: 2,\n  DOWN: 3\n};\nconst PIECE_SIZE = 5;\nconst SPAWN_OFFSET = 2;\nconst GameState = class {\n  constructor(props) {\n    this.timer = 0;\n    this.emptyValue = 0;\n    this.board = [...Array(props.boardSize)].map(e => Array(props.boardSize).fill(this.emptyValue));\n    this.boardSize = props.boardSize;\n    this.pidSize = (props.boardSize + SPAWN_OFFSET * 2) * 2;\n    this.gravity = new Direction(Gravity.DOWN);\n    this.placeBlock = true;\n    this.currPiece = null;\n  }\n  update() {\n    if (this.placeBlock) {\n      print(\"block placed bitch\");\n      this.placeBlock = false;\n      var [x, y] = [0, 0];\n\n      // Place the current piece\n      if (this.currPiece != null) {\n        for (const cell in this.currPiece.cells) {\n          [x, y] = [cell[0] + this.currPiece.cx, cell[1] + this.currPiece.cy];\n          if (x >= 0 && x < this.boardSize && y >= 0 && y < this.boardSize) {\n            this.board[y][x] = this.currPiece.type;\n          }\n        }\n      }\n\n      // Set the position and gravity with which to create a new piece\n      this.gravity.turnLeft(1);\n      var r = randint(-SPAWN_OFFSET, this.boardSize + SPAWN_OFFSET);\n      if (this.gravity.angle == Gravity.RIGHT) {\n        [x, y] = [-SPAWN_OFFSET, r];\n      } else if (this.gravity.angle == Gravity.UP) {\n        [x, y] = [r, -SPAWN_OFFSET];\n      } else if (this.gravity.angle == Gravity.LEFT) {\n        [x, y] = [SPAWN_OFFSET + this.board_size, r];\n      } else if (this.gravity.angle == Gravity.DOWN) {\n        [x, y] = [r, SPAWN_OFFSET + this.board_size];\n      }\n      this.currPiece = new Piece({\n        center_x: x,\n        center_y: y,\n        angle: this.gravity.angle,\n        pieceSize: PIECE_SIZE,\n        boardXSize: this.boardSize,\n        boardYSize: this.boardSize,\n        pidSize: this.pidSize\n      });\n    } else {\n      if (this.currPiece) {\n        this.currPiece.idleMove();\n        if (this.currPiece.checkCollision(this.currPiece.angle, this.board)) {\n          this.placeBlock = true;\n        }\n      }\n    }\n    return this;\n  }\n\n  // TODO: Call this.currPiece.activeMove and check for the collision in both idle and active directions\n  executeAction(action) {\n    return this;\n  }\n};\nexport default GameState;","map":{"version":3,"names":["Direction","Piece","randint","a","b","Math","floor","random","Gravity","RIGHT","UP","LEFT","DOWN","PIECE_SIZE","SPAWN_OFFSET","GameState","constructor","props","timer","emptyValue","board","Array","boardSize","map","e","fill","pidSize","gravity","placeBlock","currPiece","update","print","x","y","cell","cells","cx","cy","type","turnLeft","r","angle","board_size","center_x","center_y","pieceSize","boardXSize","boardYSize","idleMove","checkCollision","executeAction","action"],"sources":["/Users/joeyzhu/code/visuals/pentaquad/src/components/game/GameState.js"],"sourcesContent":["import Direction from \"./gameUtils/Direction\";\nimport Piece from \"./gameUtils/Piece\";\n\n// TODO: Pull up this function into a utils/functions file\nfunction randint(a, b) {\n    return Math.floor(Math.random() * (b - a)) + a;\n}\n\nconst Gravity = {\n    RIGHT: 0,\n    UP: 1,\n    LEFT: 2,\n    DOWN: 3,\n}\n\nconst PIECE_SIZE = 5;\nconst SPAWN_OFFSET = 2;\n\nconst GameState = class {\n    constructor (props) {\n        this.timer = 0;\n        this.emptyValue = 0; \n        this.board = [...Array(props.boardSize)].map(e => Array(props.boardSize).fill(this.emptyValue));\n        this.boardSize = props.boardSize;\n        this.pidSize = (props.boardSize + SPAWN_OFFSET * 2) * 2;\n        this.gravity = new Direction(Gravity.DOWN);\n        this.placeBlock = true;\n        this.currPiece = null;\n    }\n\n    update() {\n        if (this.placeBlock) {\n            print(\"block placed bitch\")\n            this.placeBlock = false;\n            var [x, y] = [0, 0]\n\n            // Place the current piece\n            if (this.currPiece != null) {\n                for (const cell in this.currPiece.cells) {\n                    [x, y] = [cell[0] + this.currPiece.cx, cell[1] + this.currPiece.cy]\n                    if (x >= 0 && x < this.boardSize && y >= 0 && y < this.boardSize) {\n                        this.board[y][x] = this.currPiece.type\n                    }\n                }\n            }\n\n            // Set the position and gravity with which to create a new piece\n            this.gravity.turnLeft(1);\n            var r = randint(-SPAWN_OFFSET, this.boardSize + SPAWN_OFFSET)\n            if (this.gravity.angle == Gravity.RIGHT) {\n                [x, y] = [-SPAWN_OFFSET, r]\n            } else if (this.gravity.angle == Gravity.UP) {\n                [x, y] = [r, -SPAWN_OFFSET]\n            } else if (this.gravity.angle == Gravity.LEFT) {\n                [x, y] = [SPAWN_OFFSET + this.board_size, r]\n            } else if (this.gravity.angle == Gravity.DOWN) {\n                [x, y] = [r, SPAWN_OFFSET + this.board_size]\n            }\n\n            this.currPiece = new Piece({\n                center_x: x,\n                center_y: y,\n                angle: this.gravity.angle,\n                pieceSize: PIECE_SIZE,\n                boardXSize: this.boardSize,\n                boardYSize: this.boardSize,\n                pidSize: this.pidSize,\n            })\n        } else {\n            if (this.currPiece) {\n                this.currPiece.idleMove()\n                if (this.currPiece.checkCollision(this.currPiece.angle, this.board)) {\n                    this.placeBlock = true\n                }\n            }\n        }\n        return this;\n    }\n\n    // TODO: Call this.currPiece.activeMove and check for the collision in both idle and active directions\n    executeAction(action) {\n        return this;\n    }\n}\n\nexport default GameState;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}