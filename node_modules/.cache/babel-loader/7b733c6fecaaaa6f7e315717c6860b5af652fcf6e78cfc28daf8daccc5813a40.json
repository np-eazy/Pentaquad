{"ast":null,"code":"import Cell from \"./Cell\";\nimport Piece from \"./Piece\";\nimport { randint, getPID, Direction, DXN } from \"./Utils\";\nimport { ActionType } from \"./GameAction\";\n\n// Number of cells in each piece.\nconst PIECE_SIZE = 5;\n// The distance from the boundary that each piece \nconst SPAWN_OFFSET = 2;\n// Extend edge boundaries a bit further out of the grid to make sure\n// pieces spawning on the edge can still hit the ground.\nconst BOUNDARY_MARGIN = 4;\n\n// The most essential level of state in the game. Each update() call either\n// moves an existing block, or places it and creates a new block after shifting\n// gravity. \n\nconst CoreState = class {\n  constructor(props) {\n    // The GameState's main controller\n    this.controller = props.controller;\n    this.timer = 0;\n    this.emptyValue = () => new Cell(0, {});\n    this.board = [...Array(props.boardSize)].map(e => Array(props.boardSize).fill(this.emptyValue()));\n    //\n    this.boardSize = props.boardSize;\n    // All sets of (x, y) pairs checking each other for collisions will have a unique PID dependent on a 3rd parameter\n    // describing the max size of the PID group, in order for uniqueness to work.\n    this.pidSize = (props.boardSize + SPAWN_OFFSET * 2) * 2;\n    // The direction in which the piece moves, and in which the board moves after a line is cleared.\n    this.gravity = new Direction(DXN.DOWN);\n    // Flag for placing a block\n    this.placeBlock = true;\n    // The GameState's current unplaced piece\n    this.currPiece = null;\n\n    // Create 4 different sets to check if a boundary has been hit\n    var [xSize, ySize] = [props.boardSize, props.boardSize];\n    var pid;\n    this.boundarySets = [];\n    for (var i = 0; i < 4; i++) {\n      this.boundarySets.push(new Map());\n    }\n    for (var i = -BOUNDARY_MARGIN; i < ySize + BOUNDARY_MARGIN; i++) {\n      pid = getPID(xSize, i, this.pidSize);\n      this.boundarySets[DXN.RIGHT].set(pid, [xSize, i]);\n      pid = getPID(i, -1, this.pidSize);\n      this.boundarySets[DXN.UP].set(pid, [i, -1]);\n      pid = getPID(-1, i, this.pidSize);\n      this.boundarySets[DXN.LEFT].set(pid, [-1, i]);\n      pid = getPID(i, ySize, this.pidSize);\n      this.boundarySets[DXN.DOWN].set(pid, [i, ySize]);\n    }\n  }\n\n  // TODO: Actually design balanced game mechanisms. The current code demonstrates the\n  // core rules of the game but is not very playable at all, nor does it have good objectives.\n  update() {\n    if (this.placeBlock) {\n      this.placeBlock = false;\n      var [x, y] = [0, 0];\n\n      // Place the current piece\n      if (this.currPiece != null) {\n        for (const cell of this.currPiece.cells) {\n          [x, y] = [cell[1][0] + this.currPiece.cx, cell[1][1] + this.currPiece.cy];\n          if (x >= 0 && x < this.boardSize && y >= 0 && y < this.boardSize) {\n            this.board[y][x] = this.currPiece.createCell();\n          }\n        }\n      }\n\n      // Set the position and gravity with which to create a new piece\n      this.gravity.turnLeft(1);\n      var r = randint(-SPAWN_OFFSET, this.boardSize + SPAWN_OFFSET);\n      if (this.gravity.angle == DXN.RIGHT) {\n        [x, y] = [-SPAWN_OFFSET, r];\n      } else if (this.gravity.angle == DXN.UP) {\n        [x, y] = [r, SPAWN_OFFSET + this.boardSize];\n      } else if (this.gravity.angle == DXN.LEFT) {\n        [x, y] = [SPAWN_OFFSET + this.boardSize, r];\n      } else if (this.gravity.angle == DXN.DOWN) {\n        [x, y] = [r, -SPAWN_OFFSET];\n      }\n      this.currPiece = new Piece({\n        center_x: x,\n        center_y: y,\n        angle: this.gravity.angle,\n        pieceSize: PIECE_SIZE,\n        pidSize: this.pidSize\n      });\n\n      // Check for filled lines\n      var angle = this.currPiece.dxn.angle;\n      if (angle % 2 == 0) {\n        for (var x = 0; x < this.boardSize; x++) {\n          var count = 0;\n          for (var y = 0; y < this.boardSize; y++) {\n            if (this.board[y][x].type > 0) {\n              count += 1;\n            }\n          }\n          // Horizontally shift the left or the right of the cleared line\n          if (count >= this.boardSize / 2) {\n            if (angle % 4 == 2) {\n              for (var j = 0; j < x; j++) {\n                i = x - j - 1;\n                for (var y_ = 0; y_ < this.boardSize; y_++) {\n                  this.board[y_][i + 1] = this.board[y_][i];\n                }\n              }\n              for (var y_ = 0; y_ < this.boardSize; y_++) {\n                this.board[y_][this.boardSize - 1] = new Cell(0, {});\n              }\n            } else {\n              for (var i = x + 1; i < this.boardSize; i++) {\n                for (var y_ = 0; y_ < this.boardSize; y_++) {\n                  this.board[y_][i - 1] = this.board[y_][i];\n                }\n              }\n              for (var y_ = 0; y_ < this.boardSize; y_++) {\n                this.board[y_][0] = new Cell(0, {});\n              }\n            }\n          }\n        }\n      } else {\n        for (var y = 0; y < this.boardSize; y++) {\n          var count = 0;\n          for (var x = 0; x < this.boardSize; x++) {\n            if (this.board[y][x].type > 0) {\n              count += 1;\n            }\n          }\n          // Horizontally shift the left or the right of the cleared line\n          if (count >= this.boardSize / 2) {\n            if (angle % 4 == 1) {\n              for (var j = 0; j < y; j++) {\n                i = y - j - 1;\n                for (var x_ = 0; x_ < this.boardSize; x_++) {\n                  this.board[i + 1][x_] = this.board[i][x_];\n                }\n              }\n              for (var x_ = 0; x_ < this.boardSize; x_++) {\n                this.board[0][x_] = new Cell(0, {});\n              }\n            } else {\n              for (var i = y + 1; j < this.boardSize; i++) {\n                for (var x_ = 0; x_ < this.boardSize; x_++) {\n                  this.board[i - 1][x_] = this.board[i][x_];\n                }\n              }\n              for (var x_ = 0; x_ < this.boardSize; x_++) {\n                this.board[this.boardSize - 1][x_] = new Cell(0, {});\n              }\n            }\n            break;\n          }\n        }\n      }\n    } else {\n      if (this.currPiece) {\n        this.currPiece.idleMove();\n        if (this.currPiece.checkCollision(this.currPiece.dxn.angle, this.board, this.boundarySets)) {\n          this.placeBlock = true;\n        } else {\n          if (this.controller && !this.placeBlock) {\n            var action = this.controller.consumeAction();\n            if (action) {\n              this.executeAction(action);\n            }\n          }\n        }\n      }\n    }\n    return this;\n  }\n\n  // TODO: Call this.currPiece.activeMove and check for the collision in both idle and active directions\n  executeAction(action) {\n    if (action.type == ActionType.MOVE) {\n      if (this.currPiece.checkCollision(action.props.angle, this.board, this.boundarySets)) {\n        this.placeBlock = true;\n      } else {\n        this.currPiece.activeMove(action.props.angle);\n        if (this.currPiece.checkCollision(this.currPiece.dxn.angle, this.board, this.boundarySets)) {\n          this.placeBlock = true;\n        }\n      }\n    } else if (action.type == ActionType.PLACE) {\n      this.placeBlock = true;\n    }\n    return this;\n  }\n};\nexport default CoreState;","map":{"version":3,"names":["Cell","Piece","randint","getPID","Direction","DXN","ActionType","PIECE_SIZE","SPAWN_OFFSET","BOUNDARY_MARGIN","CoreState","constructor","props","controller","timer","emptyValue","board","Array","boardSize","map","e","fill","pidSize","gravity","DOWN","placeBlock","currPiece","xSize","ySize","pid","boundarySets","i","push","Map","RIGHT","set","UP","LEFT","update","x","y","cell","cells","cx","cy","createCell","turnLeft","r","angle","center_x","center_y","pieceSize","dxn","count","type","j","y_","x_","idleMove","checkCollision","action","consumeAction","executeAction","MOVE","activeMove","PLACE"],"sources":["/Users/joeyzhu/code/visuals/pentaquad/src/components/game/coreState/CoreState.js"],"sourcesContent":["import Cell from \"./Cell\"\nimport Piece from \"./Piece\"\nimport { randint, getPID, Direction, DXN } from \"./Utils\"\nimport { ActionType } from \"./GameAction\"\n\n// Number of cells in each piece.\nconst PIECE_SIZE = 5;\n// The distance from the boundary that each piece \nconst SPAWN_OFFSET = 2;\n// Extend edge boundaries a bit further out of the grid to make sure\n// pieces spawning on the edge can still hit the ground.\nconst BOUNDARY_MARGIN = 4;\n\n// The most essential level of state in the game. Each update() call either\n// moves an existing block, or places it and creates a new block after shifting\n// gravity. \n\nconst CoreState = class {\n    constructor (props) {\n                // The GameState's main controller\n                this.controller = props.controller;\n        this.timer = 0;\n        this.emptyValue = () => new Cell(0, {}); \n        this.board = [...Array(props.boardSize)].map(e => Array(props.boardSize).fill(this.emptyValue()));\n        //\n        this.boardSize = props.boardSize;\n        // All sets of (x, y) pairs checking each other for collisions will have a unique PID dependent on a 3rd parameter\n        // describing the max size of the PID group, in order for uniqueness to work.\n        this.pidSize = (props.boardSize + SPAWN_OFFSET * 2) * 2;\n        // The direction in which the piece moves, and in which the board moves after a line is cleared.\n        this.gravity = new Direction(DXN.DOWN);\n        // Flag for placing a block\n        this.placeBlock = true;\n        // The GameState's current unplaced piece\n        this.currPiece = null;\n\n\n        // Create 4 different sets to check if a boundary has been hit\n        var [xSize, ySize] = [props.boardSize, props.boardSize]\n        var pid;\n        this.boundarySets = [];\n        for (var i = 0; i < 4; i++) {\n            this.boundarySets.push(new Map())\n        }\n        for (var i = -BOUNDARY_MARGIN; i < ySize + BOUNDARY_MARGIN; i++) {\n            pid = getPID(xSize, i, this.pidSize);\n            this.boundarySets[DXN.RIGHT].set(pid, [xSize, i])\n\n            pid = getPID(i, -1, this.pidSize);\n            this.boundarySets[DXN.UP].set(pid, [i, -1])\n\n            pid = getPID(-1, i, this.pidSize);\n            this.boundarySets[DXN.LEFT].set(pid, [-1, i])\n\n            pid = getPID(i, ySize, this.pidSize);\n            this.boundarySets[DXN.DOWN].set(pid, [i, ySize])\n        }\n    }\n\n    // TODO: Actually design balanced game mechanisms. The current code demonstrates the\n    // core rules of the game but is not very playable at all, nor does it have good objectives.\n    update() {\n        if (this.placeBlock) {\n            this.placeBlock = false;\n            var [x, y] = [0, 0]\n\n            // Place the current piece\n            if (this.currPiece != null) {\n                for (const cell of this.currPiece.cells) {\n                    [x, y] = [cell[1][0] + this.currPiece.cx, cell[1][1] + this.currPiece.cy]\n                    if (x >= 0 && x < this.boardSize && y >= 0 && y < this.boardSize) {\n                        this.board[y][x] = this.currPiece.createCell()\n                    }\n                }\n            }\n\n            // Set the position and gravity with which to create a new piece\n            this.gravity.turnLeft(1);\n            var r = randint(-SPAWN_OFFSET, this.boardSize + SPAWN_OFFSET)\n            if (this.gravity.angle == DXN.RIGHT) {\n                [x, y] = [-SPAWN_OFFSET, r]\n            } else if (this.gravity.angle == DXN.UP) {\n                [x, y] = [r, SPAWN_OFFSET + this.boardSize]\n            } else if (this.gravity.angle == DXN.LEFT) {\n                [x, y] = [SPAWN_OFFSET + this.boardSize, r]\n            } else if (this.gravity.angle == DXN.DOWN) {\n                [x, y] = [r, -SPAWN_OFFSET]\n            }\n\n            this.currPiece = new Piece({\n                center_x: x,\n                center_y: y,\n                angle: this.gravity.angle,\n                pieceSize: PIECE_SIZE,\n                pidSize: this.pidSize,\n            })\n\n            // Check for filled lines\n            var angle = this.currPiece.dxn.angle\n            if (angle % 2 == 0) {\n                for (var x = 0; x < this.boardSize; x++) {\n                    var count = 0;\n                    for (var y = 0; y < this.boardSize; y++) {\n                        if (this.board[y][x].type > 0) {\n                            count += 1;\n                        }\n                    }\n                    // Horizontally shift the left or the right of the cleared line\n                    if (count >= this.boardSize / 2) {\n                        if (angle % 4 == 2) {\n                            for (var j = 0; j < x; j++) {\n                                i = x - j - 1\n                                for (var y_ = 0; y_ < this.boardSize; y_++) {\n                                    this.board[y_][i + 1] = this.board[y_][i]\n                                }\n                            }\n                            for (var y_ = 0; y_ < this.boardSize; y_++) {\n                                this.board[y_][this.boardSize - 1] = new Cell(0, {})\n                            }\n                        } else {\n                            for (var i = x + 1; i < this.boardSize; i++) {\n                                for (var y_ = 0; y_ < this.boardSize; y_++) {\n                                    this.board[y_][i - 1] = this.board[y_][i]\n                                }\n                            }\n                            for (var y_ = 0; y_ < this.boardSize; y_++) {\n                                this.board[y_][0] = new Cell(0, {})\n                            }\n                        }\n                    }\n                }\n            } else {\n                for (var y = 0; y < this.boardSize; y++) {\n                    var count = 0;\n                    for (var x = 0; x < this.boardSize; x++) {\n                        if (this.board[y][x].type > 0) {\n                            count += 1;\n                        }\n                    }\n                    // Horizontally shift the left or the right of the cleared line\n                    if (count >= this.boardSize / 2) {\n                        if (angle % 4 == 1) {\n                            for (var j = 0; j < y; j++) {\n                                i = y - j - 1\n                                for (var x_ = 0; x_ < this.boardSize; x_++) {\n                                    this.board[i + 1][x_] = this.board[i][x_]\n                                }\n                            }\n                            for (var x_ = 0; x_ < this.boardSize; x_++) {\n                                this.board[0][x_] = new Cell(0, {})\n                            }\n                        } else {\n                            for (var i = y + 1; j < this.boardSize; i++) {\n                                for (var x_ = 0; x_ < this.boardSize; x_++) {\n                                    this.board[i - 1][x_] = this.board[i][x_]\n                                }\n                            }\n                            for (var x_ = 0; x_ < this.boardSize; x_++) {\n                                this.board[this.boardSize - 1][x_] = new Cell(0, {})\n                            }\n                        }\n                        break;\n                    }\n                }\n            }\n        } else {\n            if (this.currPiece) {\n                this.currPiece.idleMove()\n                if (this.currPiece.checkCollision(this.currPiece.dxn.angle, this.board, this.boundarySets)) {\n                    this.placeBlock = true\n                } else {\n                    if (this.controller && !this.placeBlock) {\n                        var action = this.controller.consumeAction()\n                        if (action) {\n                            this.executeAction(action)\n                        }\n                    }\n                }\n            }\n        }\n        return this;\n    }\n\n    // TODO: Call this.currPiece.activeMove and check for the collision in both idle and active directions\n    executeAction(action) {\n        if (action.type == ActionType.MOVE) {\n            if (this.currPiece.checkCollision(action.props.angle, this.board, this.boundarySets)) {\n                this.placeBlock = true\n            } else {\n                this.currPiece.activeMove(action.props.angle)\n                if (this.currPiece.checkCollision(this.currPiece.dxn.angle, this.board, this.boundarySets) ) {\n                    this.placeBlock = true\n                }\n            }\n        } else if (action.type == ActionType.PLACE) {\n            this.placeBlock = true\n        }\n        return this;\n    }\n}\n\nexport default CoreState;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}