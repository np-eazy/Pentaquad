{"ast":null,"code":"import Cell from \"./Cell\";\nimport Piece from \"./Piece\";\nimport { randint, getPID, Direction, DXN } from \"./Utils\";\nimport { ActionType } from \"./GameAction\";\n\n// Number of cells in each piece.\nconst PIECE_SIZE = 5;\n// The distance from the boundary that each piece \nconst SPAWN_OFFSET = 2;\n// Extend edge boundaries a bit further out of the grid to make sure\n// pieces spawning on the edge can still hit the ground.\nconst BOUNDARY_MARGIN = 4;\n\n// The most essential level of state in the game. Each update() call either\n// moves an existing block, or places it and creates a new block after shifting\n// gravity. \n\nconst CoreState = class {\n  constructor(props) {\n    // The GameState's main controller\n    this.controller = null;\n    // A timer that increments once each update; updates should only be called from a higher-level state which is allowed to control the flow of \"core\" tempo.\n    this.timer = 0;\n    // The dimension of the square board on which this game takes place.\n    this.boardSize = props.boardSize;\n    // The default \"empty\" value of this grid: a type-0 Cell with no props\n    this.emptyValue = () => new Cell(0, {});\n    // The main board on which everything happens\n    this.board = [...Array(props.boardSize)].map(e => Array(props.boardSize).fill(this.emptyValue()));\n    // All sets of (x, y) pairs checking each other for collisions will have a unique PID dependent on a 3rd parameter describing the max size of the PID group, in order for uniqueness to work.\n    this.pidSize = (props.boardSize + SPAWN_OFFSET * 2) * 2;\n    // The direction in which the piece moves, and in which the board moves after a line is cleared.\n    this.gravity = new Direction(DXN.LEFT);\n    // Flag for placing a block\n    this.placeBlock = true;\n    // The GameState's current unplaced piece\n    this.currPiece = null;\n\n    // Create 4 different sets to check if a boundary has been hit\n    var [xSize, ySize] = [props.boardSize, props.boardSize];\n    var pid;\n    this.boundarySets = [];\n    for (var i = 0; i < 4; i++) {\n      this.boundarySets.push(new Map());\n    }\n    for (var i = -BOUNDARY_MARGIN; i < ySize + BOUNDARY_MARGIN; i++) {\n      pid = getPID(xSize, i, this.pidSize);\n      this.boundarySets[DXN.RIGHT].set(pid, [xSize, i]);\n      pid = getPID(i, -1, this.pidSize);\n      this.boundarySets[DXN.UP].set(pid, [i, -1]);\n      pid = getPID(-1, i, this.pidSize);\n      this.boundarySets[DXN.LEFT].set(pid, [-1, i]);\n      pid = getPID(i, ySize, this.pidSize);\n      this.boundarySets[DXN.DOWN].set(pid, [i, ySize]);\n    }\n  }\n\n  // Set this piece's controller\n  setController(controller) {\n    this.controller = controller;\n  }\n\n  // TODO: Actually design balanced game mechanisms. The current code demonstrates the\n  // core rules of the game but is not very playable at all, nor does it have good objectives.\n  update(move) {\n    if (move) {\n      if (this.placeBlock) {\n        // Place the current piece, create a new one, and check for new filled lines\n        this.placeBlock = false;\n        this.placeCurrentPiece();\n        this.gravity.turnLeft(1);\n        this.createNewPiece();\n        this.checkFilledLines(this.boardSize / 4);\n      } else {\n        // Move the current piece, first in its direction of gravity and second according to the player.\n        if (this.currPiece) {\n          this.currPiece.idleMove();\n        }\n      }\n    }\n    if (this.currPiece.checkCollision(this.currPiece.dxn.angle, this.board, this.boundarySets)) {\n      this.placeBlock = true;\n    } else {\n      if (this.currPiece && this.controller && !this.placeBlock) {\n        var action = this.controller.consumeAction();\n        if (action) {\n          this.executeAction(action);\n        }\n      }\n    }\n    this.timer += 1;\n    return this; // CoreState.update() returns itself \n  }\n\n  // TODO: Call this.currPiece.activeMove and check for the collision in both idle and active directions\n  // TODO: Do collision checks and backsteps in a way that a user can keep trying to push a piece into a wall but it will keep \"sliding down\"\n  executeAction(action) {\n    if (action.type == ActionType.MOVE) {\n      if (this.currPiece.checkCollision(action.props.angle, this.board, this.boundarySets)) {\n        this.placeBlock = true;\n      } else {\n        this.currPiece.activeMove(action.props.angle);\n        if (this.currPiece.checkCollision(this.currPiece.dxn.angle, this.board, this.boundarySets)) {\n          this.currPiece.activeMove(action.props.angle);\n        }\n      }\n    } else if (action.type == ActionType.PLACE) {\n      this.placeBlock = true;\n    }\n    return this;\n  }\n\n  // Change the CoreState's grid values based on where the current piece is.\n  placeCurrentPiece() {\n    if (this.currPiece != null) {\n      var [x, y] = [0, 0];\n      for (const cell of this.currPiece.cells) {\n        [x, y] = [cell[1][0] + this.currPiece.cx, cell[1][1] + this.currPiece.cy];\n        if (x >= 0 && x < this.boardSize && y >= 0 && y < this.boardSize) {\n          this.board[y][x] = this.currPiece.createCell();\n        }\n      }\n    }\n  }\n\n  // Create a new piece based on this CoreState's gravity, at a random location.\n  createNewPiece() {\n    var [x, y] = [0, 0];\n    var r = randint(-SPAWN_OFFSET, this.boardSize + SPAWN_OFFSET);\n    if (this.gravity.angle == DXN.RIGHT) {\n      [x, y] = [-SPAWN_OFFSET, r];\n    } else if (this.gravity.angle == DXN.UP) {\n      [x, y] = [r, SPAWN_OFFSET + this.boardSize];\n    } else if (this.gravity.angle == DXN.LEFT) {\n      [x, y] = [SPAWN_OFFSET + this.boardSize, r];\n    } else if (this.gravity.angle == DXN.DOWN) {\n      [x, y] = [r, -SPAWN_OFFSET];\n    }\n    // Create the new piece\n    this.currPiece = new Piece({\n      center_x: x,\n      center_y: y,\n      angle: this.gravity.angle,\n      pieceSize: PIECE_SIZE,\n      pidSize: this.pidSize\n    });\n  }\n\n  // Check for filled lines within a certain threshold and clear them Tetris-style, based\n  // on the current direction of gravity.\n  checkFilledLines(threshold) {\n    var angle = this.currPiece.dxn.angle;\n    if (angle % 2 == 0) {\n      for (var x = 0; x < this.boardSize; x++) {\n        var count = 0;\n        for (var y = 0; y < this.boardSize; y++) {\n          if (this.board[y][x].type > 0) {\n            count += 1;\n          }\n        }\n        // Horizontally shift the left or the right of the cleared line\n        if (count >= threshold) {\n          if (angle % 4 == DXN.RIGHT) {\n            for (var j = 0; j < x; j++) {\n              i = x - j - 1;\n              for (var y_ = 0; y_ < this.boardSize; y_++) {\n                this.board[y_][i + 1] = this.board[y_][i];\n              }\n            }\n            for (var y_ = 0; y_ < this.boardSize; y_++) {\n              this.board[y_][0] = new Cell(0, {});\n            }\n          } else {\n            for (var i = x + 1; i < this.boardSize; i++) {\n              for (var y_ = 0; y_ < this.boardSize; y_++) {\n                this.board[y_][i - 1] = this.board[y_][i];\n              }\n            }\n            for (var y_ = 0; y_ < this.boardSize; y_++) {\n              this.board[y_][this.boardSize - 1] = new Cell(0, {});\n            }\n          }\n        }\n      }\n    } else {\n      for (var y = 0; y < this.boardSize; y++) {\n        var count = 0;\n        for (var x = 0; x < this.boardSize; x++) {\n          if (this.board[y][x].type > 0) {\n            count += 1;\n          }\n        }\n        // Horizontally shift the left or the right of the cleared line\n        if (count >= threshold) {\n          if (angle % 4 == DXN.DOWN) {\n            for (var j = 0; j < y; j++) {\n              i = y - j - 1;\n              for (var x_ = 0; x_ < this.boardSize; x_++) {\n                this.board[i + 1][x_] = this.board[i][x_];\n              }\n            }\n            for (var x_ = 0; x_ < this.boardSize; x_++) {\n              this.board[0][x_] = new Cell(0, {});\n            }\n          } else {\n            for (var i = y + 1; i < this.boardSize; i++) {\n              for (var x_ = 0; x_ < this.boardSize; x_++) {\n                this.board[i - 1][x_] = this.board[i][x_];\n              }\n            }\n            for (var x_ = 0; x_ < this.boardSize; x_++) {\n              this.board[this.boardSize - 1][x_] = new Cell(0, {});\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n};\nexport default CoreState;","map":{"version":3,"names":["Cell","Piece","randint","getPID","Direction","DXN","ActionType","PIECE_SIZE","SPAWN_OFFSET","BOUNDARY_MARGIN","CoreState","constructor","props","controller","timer","boardSize","emptyValue","board","Array","map","e","fill","pidSize","gravity","LEFT","placeBlock","currPiece","xSize","ySize","pid","boundarySets","i","push","Map","RIGHT","set","UP","DOWN","setController","update","move","placeCurrentPiece","turnLeft","createNewPiece","checkFilledLines","idleMove","checkCollision","dxn","angle","action","consumeAction","executeAction","type","MOVE","activeMove","PLACE","x","y","cell","cells","cx","cy","createCell","r","center_x","center_y","pieceSize","threshold","count","j","y_","x_"],"sources":["/Users/joeyzhu/code/Pentaquad/src/components/game/coreState/CoreState.js"],"sourcesContent":["import Cell from \"./Cell\"\nimport Piece from \"./Piece\"\nimport { randint, getPID, Direction, DXN } from \"./Utils\"\nimport { ActionType } from \"./GameAction\"\n\n// Number of cells in each piece.\nconst PIECE_SIZE = 5;\n// The distance from the boundary that each piece \nconst SPAWN_OFFSET = 2;\n// Extend edge boundaries a bit further out of the grid to make sure\n// pieces spawning on the edge can still hit the ground.\nconst BOUNDARY_MARGIN = 4;\n\n// The most essential level of state in the game. Each update() call either\n// moves an existing block, or places it and creates a new block after shifting\n// gravity. \n\nconst CoreState = class {\n    constructor (props) {\n        // The GameState's main controller\n        this.controller = null;\n        // A timer that increments once each update; updates should only be called from a higher-level state which is allowed to control the flow of \"core\" tempo.\n        this.timer = 0;\n        // The dimension of the square board on which this game takes place.\n        this.boardSize = props.boardSize;\n        // The default \"empty\" value of this grid: a type-0 Cell with no props\n        this.emptyValue = () => new Cell(0, {}); \n        // The main board on which everything happens\n        this.board = [...Array(props.boardSize)].map(e => Array(props.boardSize).fill(this.emptyValue()));\n        // All sets of (x, y) pairs checking each other for collisions will have a unique PID dependent on a 3rd parameter describing the max size of the PID group, in order for uniqueness to work.\n        this.pidSize = (props.boardSize + SPAWN_OFFSET * 2) * 2;\n        // The direction in which the piece moves, and in which the board moves after a line is cleared.\n        this.gravity = new Direction(DXN.LEFT);\n        // Flag for placing a block\n        this.placeBlock = true;\n        // The GameState's current unplaced piece\n        this.currPiece = null;\n\n\n        // Create 4 different sets to check if a boundary has been hit\n        var [xSize, ySize] = [props.boardSize, props.boardSize]\n        var pid;\n        this.boundarySets = [];\n        for (var i = 0; i < 4; i++) {\n            this.boundarySets.push(new Map())\n        }\n        for (var i = -BOUNDARY_MARGIN; i < ySize + BOUNDARY_MARGIN; i++) {\n            pid = getPID(xSize, i, this.pidSize);\n            this.boundarySets[DXN.RIGHT].set(pid, [xSize, i])\n\n            pid = getPID(i, -1, this.pidSize);\n            this.boundarySets[DXN.UP].set(pid, [i, -1])\n\n            pid = getPID(-1, i, this.pidSize);\n            this.boundarySets[DXN.LEFT].set(pid, [-1, i])\n\n            pid = getPID(i, ySize, this.pidSize);\n            this.boundarySets[DXN.DOWN].set(pid, [i, ySize])\n        }\n    }\n\n    // Set this piece's controller\n    setController(controller) {\n        this.controller = controller\n    }\n\n    // TODO: Actually design balanced game mechanisms. The current code demonstrates the\n    // core rules of the game but is not very playable at all, nor does it have good objectives.\n    update(move) {\n        if (move) {\n            if (this.placeBlock) {\n                // Place the current piece, create a new one, and check for new filled lines\n                this.placeBlock = false;\n                this.placeCurrentPiece();\n                this.gravity.turnLeft(1);\n                this.createNewPiece();\n                this.checkFilledLines(this.boardSize / 4);\n            } else {\n                // Move the current piece, first in its direction of gravity and second according to the player.\n                if (this.currPiece) {\n                    this.currPiece.idleMove()\n                }\n            }\n        }\n        if (this.currPiece.checkCollision(this.currPiece.dxn.angle, this.board, this.boundarySets)) {\n            this.placeBlock = true\n        } else {\n            if (this.currPiece && this.controller && !this.placeBlock) {\n                var action = this.controller.consumeAction()\n                if (action) {\n                    this.executeAction(action)\n                }\n            }\n        }\n        this.timer += 1\n        return this; // CoreState.update() returns itself \n    }\n\n    // TODO: Call this.currPiece.activeMove and check for the collision in both idle and active directions\n    // TODO: Do collision checks and backsteps in a way that a user can keep trying to push a piece into a wall but it will keep \"sliding down\"\n    executeAction(action) {\n        if (action.type == ActionType.MOVE) {\n            if (this.currPiece.checkCollision(action.props.angle, this.board, this.boundarySets)) {\n                this.placeBlock = true\n            } else {\n                this.currPiece.activeMove(action.props.angle)\n                if (this.currPiece.checkCollision(this.currPiece.dxn.angle, this.board, this.boundarySets) ) {\n                    this.currPiece.activeMove(action.props.angle)\n                }\n            }\n        } else if (action.type == ActionType.PLACE) {\n            this.placeBlock = true\n        }\n        return this;\n    }\n\n    // Change the CoreState's grid values based on where the current piece is.\n    placeCurrentPiece() {\n        if (this.currPiece != null) {\n            var [x, y] = [0, 0]\n            for (const cell of this.currPiece.cells) {\n                [x, y] = [cell[1][0] + this.currPiece.cx, cell[1][1] + this.currPiece.cy]\n                if (x >= 0 && x < this.boardSize && y >= 0 && y < this.boardSize) {\n                    this.board[y][x] = this.currPiece.createCell()\n                }\n            }\n        }\n    }\n\n    // Create a new piece based on this CoreState's gravity, at a random location.\n    createNewPiece() {\n        var [x, y] = [0, 0]\n        var r = randint(-SPAWN_OFFSET, this.boardSize + SPAWN_OFFSET)\n        if (this.gravity.angle == DXN.RIGHT) {\n            [x, y] = [-SPAWN_OFFSET, r]\n        } else if (this.gravity.angle == DXN.UP) {\n            [x, y] = [r, SPAWN_OFFSET + this.boardSize]\n        } else if (this.gravity.angle == DXN.LEFT) {\n            [x, y] = [SPAWN_OFFSET + this.boardSize, r]\n        } else if (this.gravity.angle == DXN.DOWN) {\n            [x, y] = [r, -SPAWN_OFFSET]\n        }\n        // Create the new piece\n        this.currPiece = new Piece({\n            center_x: x,\n            center_y: y,\n            angle: this.gravity.angle,\n            pieceSize: PIECE_SIZE,\n            pidSize: this.pidSize,\n        })\n    }\n\n    // Check for filled lines within a certain threshold and clear them Tetris-style, based\n    // on the current direction of gravity.\n    checkFilledLines(threshold) {\n        var angle = this.currPiece.dxn.angle\n        if (angle % 2 == 0) {\n            for (var x = 0; x < this.boardSize; x++) {\n                var count = 0;\n                for (var y = 0; y < this.boardSize; y++) {\n                    if (this.board[y][x].type > 0) {\n                        count += 1;\n                    }\n                }\n                // Horizontally shift the left or the right of the cleared line\n                if (count >= threshold) {\n                    if (angle % 4 == DXN.RIGHT) {\n                        for (var j = 0; j < x; j++) {\n                            i = x - j - 1\n                            for (var y_ = 0; y_ < this.boardSize; y_++) {\n                                this.board[y_][i + 1] = this.board[y_][i]\n                            }\n                        }\n                        for (var y_ = 0; y_ < this.boardSize; y_++) {\n                            this.board[y_][0] = new Cell(0, {})\n                        }\n                    } else {\n                        for (var i = x + 1; i < this.boardSize; i++) {\n                            for (var y_ = 0; y_ < this.boardSize; y_++) {\n                                this.board[y_][i - 1] = this.board[y_][i]\n                            }\n                        }\n                        for (var y_ = 0; y_ < this.boardSize; y_++) {\n                            this.board[y_][this.boardSize - 1] = new Cell(0, {})\n                        }\n                    }\n                }\n            }\n        } else {\n            for (var y = 0; y < this.boardSize; y++) {\n                var count = 0;\n                for (var x = 0; x < this.boardSize; x++) {\n                    if (this.board[y][x].type > 0) {\n                        count += 1;\n                    }\n                }\n                // Horizontally shift the left or the right of the cleared line\n                if (count >= threshold) {\n                    if (angle % 4 == DXN.DOWN) {\n                        for (var j = 0; j < y; j++) {\n                            i = y - j - 1\n                            for (var x_ = 0; x_ < this.boardSize; x_++) {\n                                this.board[i + 1][x_] = this.board[i][x_]\n                            }\n                        }\n                        for (var x_ = 0; x_ < this.boardSize; x_++) {\n                            this.board[0][x_] = new Cell(0, {})\n                        }\n                    } else {\n                        for (var i = y + 1; i < this.boardSize; i++) {\n                            for (var x_ = 0; x_ < this.boardSize; x_++) {\n                                this.board[i - 1][x_] = this.board[i][x_]\n                            }\n                        }\n                        for (var x_ = 0; x_ < this.boardSize; x_++) {\n                            this.board[this.boardSize - 1][x_] = new Cell(0, {})\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n    }\n}\n\nexport default CoreState;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}