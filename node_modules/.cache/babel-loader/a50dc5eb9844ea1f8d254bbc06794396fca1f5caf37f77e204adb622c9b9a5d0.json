{"ast":null,"code":"import Direction from \"./gameUtils/Direction\";\nimport Cell from \"./gameUtils/Cell\";\nimport Piece from \"./gameUtils/Piece\";\n\n// TODO: Pull up this function into a utils/functions file\nfunction randint(a, b) {\n  return Math.floor(Math.random() * (b - a)) + a;\n}\nconst Gravity = {\n  RIGHT: 0,\n  UP: 1,\n  LEFT: 2,\n  DOWN: 3\n};\nconst ActionType = {\n  MOVE: 0,\n  PLACE: 1\n};\nfunction getPID(x, y, groupSize) {\n  return x * groupSize + y;\n}\nconst PIECE_SIZE = 5;\nconst SPAWN_OFFSET = 2;\nconst BOUNDARY_MARGIN = 4;\nconst GameState = class {\n  constructor(props) {\n    this.timer = 0;\n    this.emptyValue = () => new Cell(0, {});\n    this.board = [...Array(props.boardSize)].map(e => Array(props.boardSize).fill(this.emptyValue()));\n    this.boardSize = props.boardSize;\n    this.pidSize = (props.boardSize + SPAWN_OFFSET * 2) * 2;\n    this.gravity = new Direction(Gravity.DOWN);\n    this.placeBlock = true;\n    this.currPiece = null;\n    this.controller = props.controller;\n\n    // Create 4 different sets to check if a boundary has been hit\n    var [xSize, ySize] = [props.boardSize, props.boardSize];\n    var pid;\n    this.boundarySets = [];\n    var boundarySet = new Map();\n    for (var y = -BOUNDARY_MARGIN; y < ySize + BOUNDARY_MARGIN; y++) {\n      pid = getPID(xSize, y, this.pidSize);\n      boundarySet.set(pid, [xSize, y]);\n    }\n    this.boundarySets.push(boundarySet);\n    boundarySet = new Map();\n    for (var x = -BOUNDARY_MARGIN; x < xSize + BOUNDARY_MARGIN; x++) {\n      pid = getPID(x, -1, this.pidSize);\n      boundarySet.set(pid, [x, -1]);\n    }\n    this.boundarySets.push(boundarySet);\n    boundarySet = new Map();\n    for (var y = -BOUNDARY_MARGIN; y < ySize + BOUNDARY_MARGIN; y++) {\n      pid = getPID(-1, y, this.pidSize);\n      boundarySet.set(pid, [-1, y]);\n    }\n    this.boundarySets.push(boundarySet);\n    boundarySet = new Map();\n    for (var x = -BOUNDARY_MARGIN; x < xSize + BOUNDARY_MARGIN; x++) {\n      pid = getPID(x, ySize, this.pidSize);\n      boundarySet.set(pid, [x, ySize]);\n    }\n    this.boundarySets.push(boundarySet);\n  }\n  update(actions) {\n    if (this.placeBlock) {\n      this.placeBlock = false;\n      var [x, y] = [0, 0];\n\n      // Place the current piece\n      if (this.currPiece != null) {\n        for (const cell of this.currPiece.cells) {\n          [x, y] = [cell[1][0] + this.currPiece.cx, cell[1][1] + this.currPiece.cy];\n          if (x >= 0 && x < this.boardSize && y >= 0 && y < this.boardSize) {\n            this.board[y][x] = this.currPiece.createCell();\n          }\n        }\n      }\n\n      // Set the position and gravity with which to create a new piece\n      this.gravity.turnLeft(1);\n      var r = randint(-SPAWN_OFFSET, this.boardSize + SPAWN_OFFSET);\n      if (this.gravity.angle == Gravity.RIGHT) {\n        [x, y] = [-SPAWN_OFFSET, r];\n      } else if (this.gravity.angle == Gravity.UP) {\n        [x, y] = [r, SPAWN_OFFSET + this.boardSize];\n      } else if (this.gravity.angle == Gravity.LEFT) {\n        [x, y] = [SPAWN_OFFSET + this.boardSize, r];\n      } else if (this.gravity.angle == Gravity.DOWN) {\n        [x, y] = [r, -SPAWN_OFFSET];\n      }\n      this.currPiece = new Piece({\n        center_x: x,\n        center_y: y,\n        angle: this.gravity.angle,\n        pieceSize: PIECE_SIZE,\n        pidSize: this.pidSize\n      });\n\n      // Check for filled lines\n      var angle = this.currPiece.dxn.angle;\n      if (angle % 2 == 0) {\n        for (var x = 0; x < this.boardSize; x++) {\n          var count = 0;\n          for (var y = 0; y < this.boardSize; y++) {\n            if (this.board[y][x].type > 0) {\n              count += 1;\n            }\n          }\n          // Horizontally shift the left or the right of the cleared line\n          if (count >= 5) {\n            if (angle % 4 == 0) {\n              for (var j = 0; j < x; j++) {\n                i = y - j - 1;\n                for (var y_ = 0; y_ < this.boardSize; y_++) {\n                  this.board[y_][i + 1] = this.board[y_][i];\n                }\n              }\n              for (var y_ = 0; y_ < this.boardSize; y_++) {\n                this.board[y_][0] = new Cell(0, {});\n              }\n            } else {\n              console.log(\"hit\");\n              for (var i = x + 1; j < this.boardSize; i++) {\n                for (var y_ = 0; y_ < this.boardSize; y_++) {\n                  this.board[y_][i - 1] = this.board[y_][i];\n                }\n              }\n              for (var y_ = 0; y_ < this.boardSize; y_++) {\n                this.board[y_][this.boardSize - 1] = new Cell(0, {});\n              }\n            }\n            break;\n          }\n        }\n      } else {\n        for (var y = 0; y < this.boardSize; y++) {\n          var filled = false;\n          for (var x = 0; x < this.boardSize; x++) {\n            if (this.board[y][x].type > 0) {\n              filled = false;\n            }\n          }\n          // Horizontally shift the left or the right of the cleared line\n          if (filled) {\n            if (angle % 4 == 3) {\n              for (var j = 0; j < y; j++) {\n                i = y - j - 1;\n                for (var x_ = 0; x_ < this.boardSize; x_++) {\n                  this.board[i + 1][x_] = this.board[i][x_];\n                }\n              }\n              for (var x_ = 0; x_ < this.boardSize; x_++) {\n                this.board[0][x_] = new Cell(0, {});\n              }\n            } else {\n              for (var i = x + 1; j < this.boardSize; i++) {\n                for (var x_ = 0; x_ < this.boardSize; x_++) {\n                  this.board[i - 1][x_] = this.board[i][x_];\n                }\n              }\n              for (var x_ = 0; x_ < this.boardSize; x_++) {\n                this.board[this.boardSize - 1][x_] = new Cell(0, {});\n              }\n            }\n            break;\n          }\n        }\n      }\n    } else {\n      if (this.currPiece) {\n        this.currPiece.idleMove();\n        if (this.currPiece.checkCollision(this.currPiece.dxn.angle, this.board, this.boundarySets)) {\n          this.placeBlock = true;\n        }\n        if (!this.placeBlock) {}\n      }\n    }\n    return this;\n  }\n\n  // TODO: Call this.currPiece.activeMove and check for the collision in both idle and active directions\n  executeAction(action) {\n    if (action.actionType == ActionType.MOVE) {\n      this.currPiece.activeMove(action.props.angle);\n      if (this.currPiece.checkCollision(action.props.angle, this.board, this.boundarySets)) {\n        this.placeBlock = true;\n      }\n    } else if (action.actionType == ActionType.PLACE) {\n      this.placeBlock = true;\n    }\n    return this;\n  }\n};\nexport default GameState;","map":{"version":3,"names":["Direction","Cell","Piece","randint","a","b","Math","floor","random","Gravity","RIGHT","UP","LEFT","DOWN","ActionType","MOVE","PLACE","getPID","x","y","groupSize","PIECE_SIZE","SPAWN_OFFSET","BOUNDARY_MARGIN","GameState","constructor","props","timer","emptyValue","board","Array","boardSize","map","e","fill","pidSize","gravity","placeBlock","currPiece","controller","xSize","ySize","pid","boundarySets","boundarySet","Map","set","push","update","actions","cell","cells","cx","cy","createCell","turnLeft","r","angle","center_x","center_y","pieceSize","dxn","count","type","j","i","y_","console","log","filled","x_","idleMove","checkCollision","executeAction","action","actionType","activeMove"],"sources":["/Users/joeyzhu/code/visuals/pentaquad/src/components/game/GameState.js"],"sourcesContent":["import Direction from \"./gameUtils/Direction\";\nimport Cell from \"./gameUtils/Cell\";\nimport Piece from \"./gameUtils/Piece\";\n\n// TODO: Pull up this function into a utils/functions file\nfunction randint(a, b) {\n    return Math.floor(Math.random() * (b - a)) + a;\n}\n\nconst Gravity = {\n    RIGHT: 0,\n    UP: 1,\n    LEFT: 2,\n    DOWN: 3,\n}\n\nconst ActionType = {\n    MOVE: 0,\n    PLACE: 1,\n}\n\n\nfunction getPID(x, y, groupSize) {\n    return x * groupSize + y;\n}\n\nconst PIECE_SIZE = 5;\nconst SPAWN_OFFSET = 2;\nconst BOUNDARY_MARGIN = 4;\n\n\nconst GameState = class {\n    constructor (props) {\n        this.timer = 0;\n        this.emptyValue = () => new Cell(0, {}); \n        this.board = [...Array(props.boardSize)].map(e => Array(props.boardSize).fill(this.emptyValue()));\n        this.boardSize = props.boardSize;\n        this.pidSize = (props.boardSize + SPAWN_OFFSET * 2) * 2;\n        this.gravity = new Direction(Gravity.DOWN);\n        this.placeBlock = true;\n        this.currPiece = null;\n        this.controller = props.controller;\n\n        // Create 4 different sets to check if a boundary has been hit\n        var [xSize, ySize] = [props.boardSize, props.boardSize]\n        var pid;\n        this.boundarySets = [];\n        var boundarySet = new Map()\n        for (var y = -BOUNDARY_MARGIN; y < ySize + BOUNDARY_MARGIN; y++) {\n            pid = getPID(xSize, y, this.pidSize);\n            boundarySet.set(pid, [xSize, y])\n        }\n        this.boundarySets.push(boundarySet);\n\n        boundarySet = new Map()\n        for (var x = -BOUNDARY_MARGIN; x < xSize + BOUNDARY_MARGIN; x++) {\n            pid = getPID(x, -1, this.pidSize);\n            boundarySet.set(pid, [x, -1])\n        }\n        this.boundarySets.push(boundarySet);\n\n        boundarySet = new Map()\n        for (var y = -BOUNDARY_MARGIN; y < ySize + BOUNDARY_MARGIN; y++) {\n            pid = getPID(-1, y, this.pidSize);\n            boundarySet.set(pid, [-1, y])\n        }\n        this.boundarySets.push(boundarySet);\n\n        boundarySet = new Map()\n        for (var x = -BOUNDARY_MARGIN; x < xSize + BOUNDARY_MARGIN; x++) {\n            pid = getPID(x, ySize, this.pidSize);\n            boundarySet.set(pid, [x, ySize])\n        }\n        this.boundarySets.push(boundarySet);\n    }\n\n    update(actions) {\n        if (this.placeBlock) {\n            this.placeBlock = false;\n            var [x, y] = [0, 0]\n\n            // Place the current piece\n            if (this.currPiece != null) {\n                for (const cell of this.currPiece.cells) {\n                    [x, y] = [cell[1][0] + this.currPiece.cx, cell[1][1] + this.currPiece.cy]\n                    if (x >= 0 && x < this.boardSize && y >= 0 && y < this.boardSize) {\n                        this.board[y][x] = this.currPiece.createCell()\n                    }\n                }\n            }\n\n            // Set the position and gravity with which to create a new piece\n            this.gravity.turnLeft(1);\n            var r = randint(-SPAWN_OFFSET, this.boardSize + SPAWN_OFFSET)\n            if (this.gravity.angle == Gravity.RIGHT) {\n                [x, y] = [-SPAWN_OFFSET, r]\n            } else if (this.gravity.angle == Gravity.UP) {\n                [x, y] = [r, SPAWN_OFFSET + this.boardSize]\n            } else if (this.gravity.angle == Gravity.LEFT) {\n                [x, y] = [SPAWN_OFFSET + this.boardSize, r]\n            } else if (this.gravity.angle == Gravity.DOWN) {\n                [x, y] = [r, -SPAWN_OFFSET]\n            }\n\n            this.currPiece = new Piece({\n                center_x: x,\n                center_y: y,\n                angle: this.gravity.angle,\n                pieceSize: PIECE_SIZE,\n                pidSize: this.pidSize,\n            })\n\n            // Check for filled lines\n            var angle = this.currPiece.dxn.angle\n            if (angle % 2 == 0) {\n                for (var x = 0; x < this.boardSize; x++) {\n                    var count = 0;\n                    for (var y = 0; y < this.boardSize; y++) {\n                        if (this.board[y][x].type > 0) {\n                            count += 1;\n                        }\n                    }\n                    // Horizontally shift the left or the right of the cleared line\n                    if (count >= 5) {\n                        if (angle % 4 == 0) {\n                            for (var j = 0; j < x; j++) {\n                                i = y - j - 1\n                                for (var y_ = 0; y_ < this.boardSize; y_++) {\n                                    this.board[y_][i + 1] = this.board[y_][i]\n                                }\n                            }\n                            for (var y_ = 0; y_ < this.boardSize; y_++) {\n                                this.board[y_][0] = new Cell(0, {})\n                            }\n                        } else {\n                            console.log(\"hit\")\n                            for (var i = x + 1; j < this.boardSize; i++) {\n                                for (var y_ = 0; y_ < this.boardSize; y_++) {\n                                    this.board[y_][i - 1] = this.board[y_][i]\n                                }\n                            }\n                            for (var y_ = 0; y_ < this.boardSize; y_++) {\n                                this.board[y_][this.boardSize - 1] = new Cell(0, {})\n                            }\n                        }\n                        break;\n                    }\n                }\n            } else {\n                for (var y = 0; y < this.boardSize; y++) {\n                    var filled = false;\n                    for (var x = 0; x < this.boardSize; x++) {\n                        if (this.board[y][x].type > 0) {\n                            filled = false;\n                        }\n                    }\n                    // Horizontally shift the left or the right of the cleared line\n                    if (filled) {\n                        if (angle % 4 == 3) {\n                            for (var j = 0; j < y; j++) {\n                                i = y - j - 1\n                                for (var x_ = 0; x_ < this.boardSize; x_++) {\n                                    this.board[i + 1][x_] = this.board[i][x_]\n                                }\n                            }\n                            for (var x_ = 0; x_ < this.boardSize; x_++) {\n                                this.board[0][x_] = new Cell(0, {})\n                            }\n                        } else {\n                            for (var i = x + 1; j < this.boardSize; i++) {\n                                for (var x_ = 0; x_ < this.boardSize; x_++) {\n                                    this.board[i - 1][x_] = this.board[i][x_]\n                                }\n                            }\n                            for (var x_ = 0; x_ < this.boardSize; x_++) {\n                                this.board[this.boardSize - 1][x_] = new Cell(0, {})\n                            }\n                        }\n                        break;\n                    }\n                }\n            }\n        } else {\n            if (this.currPiece) {\n                this.currPiece.idleMove()\n                if (this.currPiece.checkCollision(this.currPiece.dxn.angle, this.board, this.boundarySets)) {\n                    this.placeBlock = true\n                }\n                if (!this.placeBlock) {\n                     \n                }\n            }\n        }\n        return this;\n    }\n\n    // TODO: Call this.currPiece.activeMove and check for the collision in both idle and active directions\n    executeAction(action) {\n        if (action.actionType == ActionType.MOVE) {\n            this.currPiece.activeMove(action.props.angle)\n            if (this.currPiece.checkCollision(action.props.angle, this.board, this.boundarySets)) {\n                this.placeBlock = true\n            }\n        } else if (action.actionType == ActionType.PLACE) {\n            this.placeBlock = true\n        }\n        return this;\n    }\n}\n\nexport default GameState;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}